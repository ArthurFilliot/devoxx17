package bk.devoxx17.emulators;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import bk.devoxx17.emulators.databases.DatabaseSQL;
import bk.devoxx17.front.InjectionMethod;
import bk.devoxx17.test.DatabaseSQLHelper;
import bk.devoxx17.test.MaliciousUserInputDictionnary;
import bk.devoxx17.test.MaliciousUserInputDictionnary.UserInput;

public class MyVulnerabilityEmulatorSQLClassicalTest extends AbstractVulnerabilityEmulatorTest {
	
	private static MaliciousUserInputDictionnary dictionnary = new MaliciousUserInputDictionnary();
	
	public MyVulnerabilityEmulatorSQLClassicalTest() {
		emulator = new VulnerabilityEmulatorSQLClassical(DatabaseSQLHelper.getDb());
		breakingMethod = InjectionMethod.CLASSICAL;
	}
	 
	@Before
	public void init() {
		DatabaseSQLHelper.init();
		DatabaseSQL db = DatabaseSQLHelper.getDb();
		String createSchema = db.getScript("/sql/schema.sql");
		String insertUsers = db.getScript("/sql/users.sql");
		db.executeScript(createSchema);
		db.executeScript(insertUsers);
	}

	@After
	public void terminate() {
		DatabaseSQLHelper.terminate();
	}
	
	@Test
	public void TestOne() {
		UserInput input = dictionnary.get(breakingMethod);
		assertTrue(breakingMethod+ " should work", emulator.check(input.login, input.password));
	}

}
