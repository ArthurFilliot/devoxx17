package bk.devoxx17.emulators;

import java.sql.SQLException;

import org.apache.commons.lang3.EnumUtils;

import com.google.common.collect.ArrayListMultimap;

import bk.devoxx17.utils.DatabaseSQL;

public abstract class VulnerabilityEmulatorSQL extends VulnerabilityEmulator {
	DatabaseSQL db;

	public void setDb(DatabaseSQL db) {
		this.db = db;
	}

	VulnerabilityEmulatorSQL() {
	}

	VulnerabilityEmulatorSQL(DatabaseSQL db) {
		this.db = db;
	}

	private String escape(String s) {
		if (s == null) {
			return "";
		}
		return s.replace('\'', '_').replace(';', '_');
	}

	protected boolean stdCheck(String login, String password) {
		try {
			ArrayListMultimap<String, String> result = db
					.executeSelection("SELECT count(*) as nb FROM Users WHERE (login='" + escape(login) + "')");
			if (!result.isEmpty() && Integer.parseInt(result.get("nb").get(0)) > 0) {
				result = db.executeSelection("SELECT count(*) as nb FROM Users WHERE (login='" + escape(login)
						+ "') and (password='" + escape(password) + "')");
				if (!result.isEmpty() && Integer.parseInt(result.get("nb").get(0)) > 0) {
					return true;
				} else {
					raisePwdNotMatched(login);
				}
			}
			raiseUserNotFound();
			return false;
		} catch (SQLException e) {
			return false;
		}
	}

	@Override
	protected boolean check(String login, String password) {
		return stdCheck(login, password);
	}

	@Override
	public boolean doCheck(String login, String password) {
		if (EnumUtils.isValidEnum(CompromisedLogin.class, login)) {
			if (this instanceof VulnerabilityEmulatorSQLSocial) {
				return super.doCheck(login, password);
			}else if (this instanceof VulnerabilityEmulatorSQLUnionExploitDeluxe) {
				return super.doCheck(login, password);
			}else{
				return false;
			}
		}
		return super.doCheck(login, password);
	}

}
