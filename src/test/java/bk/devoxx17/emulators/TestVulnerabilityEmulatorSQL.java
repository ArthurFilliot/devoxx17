package bk.devoxx17.emulators;

import static org.junit.Assert.assertTrue;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.log4j.Logger;
import org.junit.After;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import bk.devoxx17.emulators.databases.DatabaseSQL;
import bk.devoxx17.front.Dispatcher;
import bk.devoxx17.front.InjectionMethod;
import bk.devoxx17.test.AssertionsReportHelper;
import bk.devoxx17.test.DatabaseSQLHelper;
import bk.devoxx17.test.TestMode;

@RunWith(Parameterized.class)
public class TestVulnerabilityEmulatorSQL extends AbstractTestVulnerabilityEmulator {

	private static final Logger log = Logger.getLogger(TestVulnerabilityEmulatorSQL.class);
	private TestMode mode = TestMode.REPORT_LOG;
	private AssertionsReportHelper junitReport = new AssertionsReportHelper();
	
	@Override
	protected void check(boolean result, String message) {
		switch (mode) {
		case DEBUG : 
			assertTrue(message, result);
			break;
		case REPORT_LOG : 
			log.info(message + new String(new char[90-message.length()]).replace("\0", " ") + '\t' + (result?"OK":"KO"));
			break;
		case REPORT_JUNIT :
			junitReport.assertTrue(message, result);
		}
	}

	public TestVulnerabilityEmulatorSQL(VulnerabilityEmulator emulator, InjectionMethod method) {
		this.emulator = emulator;
		this.breakingMethod = method;
	}
	
	@Before
	public void init() throws SQLException {
		DatabaseSQLHelper.init();
		DatabaseSQL db = DatabaseSQLHelper.getDb();
		String createSchema = db.getScript("/sql/schema.sql");
		String insertUsers = db.getScript("/sql/users.sql");
		db.executeScript(createSchema);
		db.executeScript(insertUsers);
		junitReport.init();
	}

	@After
	public void terminate() {
		DatabaseSQLHelper.terminate();
		junitReport.end();
	}

	@Parameters
	public static Collection<Object[]> data() {
		Collection<Object[]> data = new ArrayList<Object[]>();
		for (InjectionMethod method : InjectionMethod.values()) {
			VulnerabilityEmulator emulator = Dispatcher.selectEmulator(method);
			if (emulator instanceof VulnerabilityEmulatorSQL) {
				((VulnerabilityEmulatorSQL) emulator).setDb(DatabaseSQLHelper.getDb());
				data.add(new Object[] {emulator, method});
			}
		}
		return data;
	}
}
